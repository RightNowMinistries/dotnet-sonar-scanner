name: SonarCloud Scanner (dotnet)
author: RightNow Ministries
description: Runs SonarCloud Static Analysis and Code Coverage for .Net Core Projects
inputs:
  sonar-login:
    description: "Sonar Auth Token"
    required: true
  sonar-project-key:
    description: "SonarCloud Project Key"
    required: true
  sonar-organization:
    description: "SonarCloud Organization"
    required: true
  sonar-url:
    description: "SonarCloud URL"
    default: "https://sonarcloud.io"
  sonar-exclusions:
    description: "List of files excluded from SonarCloud Static Analysis"
  sonar-code-coverage-exclusions: 
    description: "List of files excluded from SonarCloud Code Coverage Analysis"
  sonar-duplication-exclusions:
    description: "List of files excluded from SonarCloud Duplication Analysis"
  dotnet-test-project: 
    description: "Project name for test coverage. If not provided, all tests will run."
    default: "" 
runs: 
  using: composite
  steps:
    - id: config
      run: |
        echo "Running Sonar Static Analysis for ${{ inputs.sonar-project-key }} using dotnet-sonarscanner $SONAR_SCANNER_VERSION"
        echo "sonar-scanner-version=$SONAR_SCANNER_VERSION" >> $GITHUB_OUTPUT
      shell: bash
      env:
        SONAR_SCANNER_VERSION: 4.10.0

    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: temurin
        
    - name: Install Scanner
      run: dotnet tool install --global dotnet-sonarscanner --version $SONAR_SCANNER_VERSION
      shell: bash
      env: 
        SONAR_SCANNER_VERSION: ${{ steps.config.outputs.sonar-scanner-version }}

    - id: scan-pr
      name: Start Pull Request Analysis
      if: ${{ github.event_name == 'pull_request'}}
      run: > 
        ${{ format('dotnet sonarscanner begin /key:"{0}" /o:"{1}" /d:sonar.login="{2}" /d:sonar.host.url="{3}" /d:sonar.cs.opencover.reportsPaths="{4}" {5} {6} {7}',
        inputs.sonar-project-key,
        inputs.sonar-organization,
        inputs.sonar-login,
        inputs.sonar-url,
        inputs.dotnet-test-project != '' && format('{0}/coverage.opencover.xml', inputs.dotnet-test-project) || '',
        inputs.sonar-exclusions != '' && format('/d:sonar.exclusions="{0}"', inputs.sonar-exclusions) || '',
        inputs.sonar-code-coverage-exclusions != '' && format('/d:sonar.coverage.exclusions="{0}"', inputs.sonar-code-coverage-exclusions) || '',
        inputs.sonar-duplication-exclusions != '' && format('/d:sonar.cpd.exclusions="{0}"', inputs.sonar-duplication-exclusions) || ''
        )}}
      shell: bash

    - id: scan-branch
      name: Start Branch Analysis
      if: ${{ github.event_name == 'push'}}
      run: >
        dotnet-sonarscanner begin /key:"${{ inputs.sonar-project-key }}" 
        /o:"${{ inputs.sonar-organization }}" 
        /d:sonar.host.url="${{ inputs.sonar-url }}" 
        /d:sonar.login="${{ inputs.sonar-login }}" 
        /d:sonar.cs.opencover.reportsPaths="${{ inputs.dotnet-test-project }}/coverage.opencover.xml" 
        /d:sonar.exclusions='${SONAR_EXCLUSIONS}'
        /d:sonar.coverage.exclusions='${SONAR_CODE_COVERAGE_EXCLUSIONS}'
        /d:sonar.cpd.exclusions='${SONAR_CODE_DUPLICATION_EXCLUSIONS}'
        /d:sonar.branch.name="${{ github.ref_name }}"
      shell: bash
      env:
        SONAR_EXCLUSIONS: ${{ inputs.sonar-exclusions }}
        SONAR_CODE_COVERAGE_EXCLUSIONS: ${{ inputs.sonar-code-coverage-exclusions }}
        SONAR_CODE_DUPLICATION_EXCLUSIONS: ${{ inputs.sonar-duplication-exclusions }}

    - id: build
      name: DotNet Build
      run: dotnet build
      shell: bash

    - id: test
      name: DotNet Test
      run: dotnet test --no-build --no-restore ${{ inputs.dotnet-test-project }} /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      shell: bash

    - name: Complete Analysis
      run: dotnet-sonarscanner end /d:sonar.login=${{ inputs.sonar-login }}
      shell: bash