name: SonarCloud Scanner (dotnet)
author: RightNow Ministries
description: Runs SonarCloud Static Analysis and Code Coverage for .Net Core Projects
inputs:
  sonar-login:
    description: "Sonar Auth Token"
    required: true
  sonar-project-key:
    description: "SonarCloud Project Key"
    required: true
  sonar-organization:
    description: "SonarCloud Organization"
    required: true
  sonar-url:
    description: "SonarCloud URL"
    default: "https://sonarcloud.io"
  sonar-exclusions:
    description: "List of files excluded from SonarCloud Static Analysis"
  sonar-code-coverage-exclusions:
    description: "List of files excluded from SonarCloud Code Coverage Analysis"
    default: ""
  sonar-duplication-exclusions:
    description: "List of files excluded from SonarCloud Duplication Analysis"
  dotnet-test-project:
    description: "Project name for test coverage. If not provided, all tests will run."
    default: ""
  copy-dlls:
    description: "Copy DLLs to a directory. If not provided, the Copy DLLs step will be skipped."
    default: "false"
  files-to-copy:
    description: "List of files to copy."
    default: ""
  copy-to-directory:
    description: "Directory to copy the files to."
    default: ""
runs:
  using: composite
  steps:
    - id: config
      run: |
        echo "Running Sonar Static Analysis for ${{ inputs.sonar-project-key }} using dotnet-sonarscanner $SONAR_SCANNER_VERSION"
        echo "sonar-scanner-version=$SONAR_SCANNER_VERSION" >> $GITHUB_OUTPUT
      shell: bash
      env:
        SONAR_SCANNER_VERSION: 5.13.0

    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        java-version: 17
        distribution: temurin

    - name: Install Scanner
      run: dotnet tool install --global dotnet-sonarscanner --version $SONAR_SCANNER_VERSION
      shell: bash
      env:
        SONAR_SCANNER_VERSION: ${{ steps.config.outputs.sonar-scanner-version }}

    - id: scan-pr
      name: Start Pull Request Analysis
      if: ${{ github.event_name == 'pull_request'}}
      run: |
        CODE_COVERAGE_DEFAULT_EXCLUSIONS="**/Startup.cs,**/Program.cs"
        CODE_COVERAGE_EXCLUSIONS="${SONAR_CODE_COVERAGE_EXCLUSIONS:-''}"

        if [[ -z "$CODE_COVERAGE_EXCLUSIONS" ]]; then
          CODE_COVERAGE_EXCLUSIONS="$CODE_COVERAGE_DEFAULT_EXCLUSIONS"
        else
          CODE_COVERAGE_EXCLUSIONS="$CODE_COVERAGE_DEFAULT_EXCLUSIONS,$CODE_COVERAGE_EXCLUSIONS"
        fi

        dotnet sonarscanner begin /k:"${{ inputs.sonar-project-key }}" \
          /o:"${{ inputs.sonar-organization }}" \
          /d:sonar.host.url="${{ inputs.sonar-url }}" \
          /d:sonar.login="${{ inputs.sonar-login }}" \
          /d:sonar.cs.opencover.reportsPaths="${{ inputs.dotnet-test-project }}/coverage.opencover.xml" \
          /d:sonar.exclusions="${SONAR_EXCLUSIONS:-''}" \
          /d:sonar.coverage.exclusions="$CODE_COVERAGE_EXCLUSIONS" \
          /d:sonar.cpd.exclusions="${SONAR_CODE_DUPLICATION_EXCLUSIONS:-''}" \
          /d:sonar.dotnet.excludeTestProjects=true \
      shell: bash
      env:
        SONAR_EXCLUSIONS: ${{ inputs.sonar-exclusions }}
        SONAR_CODE_COVERAGE_EXCLUSIONS: ${{ inputs.sonar-code-coverage-exclusions }}
        SONAR_CODE_DUPLICATION_EXCLUSIONS: ${{ inputs.sonar-duplication-exclusions }}

    - id: scan-branch
      name: Start Branch Analysis
      if: ${{ github.event_name == 'push'}}
      run: |
        dotnet sonarscanner begin /k:"${{ inputs.sonar-project-key }}" \
          /o:"${{ inputs.sonar-organization }}" \
          /d:sonar.host.url="${{ inputs.sonar-url }}" \
          /d:sonar.login="${{ inputs.sonar-login }}" \
          /d:sonar.cs.opencover.reportsPaths="${{ inputs.dotnet-test-project }}/coverage.opencover.xml" \
          /d:sonar.exclusions="${SONAR_EXCLUSIONS:-''}" \
          /d:sonar.coverage.exclusions="${SONAR_CODE_COVERAGE_EXCLUSIONS:-''}" \
          /d:sonar.cpd.exclusions="${SONAR_CODE_DUPLICATION_EXCLUSIONS:-''}" \
          /d:sonar.branch.name="${{ github.ref_name }}" \
          /d:sonar.dotnet.excludeTestProjects=true \
      shell: bash
      env:
        SONAR_EXCLUSIONS: ${{ inputs.sonar-exclusions }}
        SONAR_CODE_COVERAGE_EXCLUSIONS: ${{ inputs.sonar-code-coverage-exclusions }}
        SONAR_CODE_DUPLICATION_EXCLUSIONS: ${{ inputs.sonar-duplication-exclusions }}

    - id: build
      name: DotNet Build
      run: dotnet build
      shell: bash

    - id: copy-required-dlls
      name: Copy Required DLLs
      if: ${{ inputs.copy-dlls == 'true' }}
      run: cp -f ${{ inputs.files-to-copy }} ${{ inputs.copy-to-directory }}
      shell: bash

    - id: test
      name: DotNet Test
      run: dotnet test --no-build --no-restore ${{ inputs.dotnet-test-project }} /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      shell: bash

    - name: Complete Analysis
      run: dotnet sonarscanner end /d:sonar.login=${{ inputs.sonar-login }}
      shell: bash
